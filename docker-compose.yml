version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: food-delivery-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-food_delivery_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - food-delivery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food-delivery-backend
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-food_delivery_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      TELEGRAM_BOT_TOKEN_CUSTOMER: ${TELEGRAM_BOT_TOKEN_CUSTOMER}
      TELEGRAM_BOT_TOKEN_DELIVERY: ${TELEGRAM_BOT_TOKEN_DELIVERY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - food-delivery-network
    volumes:
      - ./backend/logs:/app/logs

  # Admin Dashboard
  admin_dashboard:
    build:
      context: ./admin_dashboard
      dockerfile: Dockerfile
    container_name: food-delivery-admin
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      VITE_API_BASE_URL: ${API_BASE_URL:-http://localhost:5000/api}
      VITE_SOCKET_URL: ${SOCKET_URL:-http://localhost:5000}
    depends_on:
      - backend
    networks:
      - food-delivery-network

  # Customer Bot
  customer_bot:
    build:
      context: ./telegram_apps/customer_bot
      dockerfile: Dockerfile
    container_name: food-delivery-customer-bot
    restart: unless-stopped
    environment:
      TELEGRAM_BOT_TOKEN_CUSTOMER: ${TELEGRAM_BOT_TOKEN_CUSTOMER}
      API_BASE_URL: ${API_BASE_URL:-http://backend:5000/api}
      WEBAPP_URL: ${CUSTOMER_WEBAPP_URL}
      RESTAURANT_NAME: ${RESTAURANT_NAME}
      RESTAURANT_PHONE: ${RESTAURANT_PHONE}
      RESTAURANT_ADDRESS: ${RESTAURANT_ADDRESS}
    depends_on:
      - backend
    networks:
      - food-delivery-network

  # Delivery Bot
  delivery_bot:
    build:
      context: ./telegram_apps/delivery_bot
      dockerfile: Dockerfile
    container_name: food-delivery-delivery-bot
    restart: unless-stopped
    environment:
      TELEGRAM_BOT_TOKEN_DELIVERY: ${TELEGRAM_BOT_TOKEN_DELIVERY}
      API_BASE_URL: ${API_BASE_URL:-http://backend:5000/api}
      WEBAPP_URL: ${DELIVERY_WEBAPP_URL}
      RESTAURANT_NAME: ${RESTAURANT_NAME}
      RESTAURANT_PHONE: ${RESTAURANT_PHONE}
    depends_on:
      - backend
    networks:
      - food-delivery-network

networks:
  food-delivery-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local